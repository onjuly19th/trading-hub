spring.application.name=trading-hub

crypto.api.url=https://api.coingecko.com/api/v3/coins/markets
# https://api.coingecko.com/api/v3/simple/price?ids=

stock.api.url=https://finnhub.io/api/v1/quote?symbol=
stock.api.key=cv07k21r01qo8ssf5g90cv07k21r01qo8ssf5g9g

exchange.api.url=https://v6.exchangerate-api.com/v6/
exchange.api.key=c03e38e03840ef8a5c24df3c

# JWT Configuration
jwt.secret-key=dsffm42j9238tu4387qty8vwyhw9e8yt38839t9382t24326436tse
jwt.expiration=86400000
jwt.refresh-token.expiration=604800000

# Logging Configuration
# Root 로그 레벨
logging.level.root=WARN
# 도메인별 로그 레벨
logging.level.com.tradinghub=WARN
logging.level.com.tradinghub.domain.trading=WARN
# 주문 실행 서비스는 INFO 레벨로 유지 (중요 주문 정보 확인 위해)
logging.level.com.tradinghub.domain.trading.OrderExecutionService=INFO
# 가격 업데이트는 DEBUG 레벨로 낮춤
logging.level.com.tradinghub.domain.trading.controller.PriceUpdateController=WARN
# 포트폴리오 관련 로그를 DEBUG로 설정하여 오류 원인 파악
logging.level.com.tradinghub.domain.portfolio=DEBUG
logging.level.com.tradinghub.domain.user=WARN
# 웹소켓 로그는 ERROR 레벨로 설정
logging.level.com.tradinghub.infrastructure.websocket=ERROR
logging.level.org.springframework.messaging=ERROR
logging.level.org.springframework.web.socket=ERROR

# 애플리케이션 시작 관련 로그 활성화
logging.level.org.springframework.boot=INFO
logging.level.org.springframework.boot.web.embedded.tomcat=INFO
logging.level.com.tradinghub.TradingHubApplication=INFO

# 시스템 로그 레벨
logging.level.com.tradinghub.security=ERROR
logging.level.org.springframework.security=ERROR
logging.level.org.springframework.web=ERROR
logging.level.org.hibernate=ERROR
logging.level.org.hibernate.SQL=OFF
logging.level.org.hibernate.type.descriptor.sql=OFF
logging.level.org.springframework.orm.jpa=ERROR
logging.level.org.springframework.transaction=ERROR

# 로그 출력 패턴 (날짜/시간, 로그 레벨, 쓰레드, 클래스, 메시지)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%X{requestId}] [%X{username}] - %msg%n

# Server Configuration
server.port=8080

# Database Configuration
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# CORS Configuration
spring.mvc.cors.allowed-origins=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000,http://127.0.0.1:3001
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
spring.mvc.cors.exposed-headers=Access-Control-Allow-Origin,Access-Control-Allow-Credentials,Authorization
spring.mvc.cors.allow-credentials=true
spring.mvc.cors.max-age=3600

# Security Configuration
spring.security.ignored=/h2-console/**

# JPA Configuration
spring.jpa.open-in-view=false
